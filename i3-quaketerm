#!/usr/bin/env python3
#  Copyright (c) 2017-2020, David Hauweele <david@hauweele.net>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#
#   1. Redistributions of source code must retain the above copyright notice, this
#      list of conditions and the following disclaimer.
#   2. Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import getopt
import signal
import shlex
import sys
import os

from collections import deque

import i3ipc

VERSION="0.4-git"

def show(i3, ws, name, position, align, w_ratio, h_ratio, offset):
    verbose("show %s window" % (name,))

    x, y = ws.rect.x, ws.rect.y
    w, h = ws.rect.width, ws.rect.height

    # TODO: Accept height, width, offset in both pixels or ratio.

    # Width and height (as ratio of workspace size)
    h_ = int(h * h_ratio)
    w_ = int(w * w_ratio)

    # Vertical position (with offset)
    if position == "bottom":
        y = y + h - h_ - offset
    else:
        y = y + offset

    # Horizontal position
    if align == "center":
        x = x + (w - w_) / 2
    elif align == "left":
        x = 0
    elif align == "right":
        x = w - w_

    # Store final width and height
    h = h_
    w = w_

    i3.command("[instance=%s],"
               "scratchpad show,"
               "resize set %d px %d px,"
               "move absolute position %d px %d px" % (name, w, h, x, y))

def hide(i3, name):
    verbose("hide %s window" % (name,))
    i3.command("[instance=%s] floating enable, move scratchpad" % (name,))

def find_instanced(con, instance, r = []):
    """Find a container by instance.
    The find_*() method from i3ipc did not return foating nodes
    correctly. So we reimplemented it here.
    """
    result = []

    q = deque(con.nodes)
    while q:
        con = q.popleft()
        if con.window_instance == instance:
            result.append(con)
        q.extend(con.nodes)
        q.extend(con.floating_nodes)

    return result

def find(i3, name):
    tree = i3.get_tree()
    term = find_instanced(tree, name)

    if len(term) == 0:
        return None
    return term[0]

def version():
    print("i3-quaketerm v%s" % (VERSION,))

def usage(name):
    print("usage: %s [OPTIONS]" % (name,))
    print("""
  -h, --help          Show this help message
  -V, --version       Show version information
  -v, --verbose       Be more verbose
  -H, --hidden        Hide terminal when created (default: false)
  -t, --terminal      Terminal emulator to use (default: xterm)
  -n, --name          Name of the terminal (WM_CLASS) (default: i3-quaketerm)
  -N, --name-option   Option used to change the name on terminal emulator (default: -name)
  -W, --workspace     Append the workspace ID to the instance name, creating one instance per workspace.
  -e, --extra-options Extra options passed to the terminal
  -p, --position      Position of the quaketerm (top or bottom, default: top)
  -a, --align         Horizontal alignment (left, right or center, default: center)
  -o  --offset        Offset in pixels from top or bottom (see -p)
  -g  --height        Height as a ratio of workspace height (default: 0.25)
  -w, --width         Width as a ratio of workspace width (default: 1.00)""")

if __name__ == '__main__':
    progname = os.path.basename(sys.argv[0])
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hVHt:n:N:We:vp:a:o:g:w:", [ "help", "version", "hidden",
                                                                           "terminal=", "name=", "workspace",
                                                                           "name-option=", "extra-options=", "verbose",
                                                                           "position=", "align=", "offset=", "height=",
                                                                           "width=" ])
    except getopt.GetoptError as e:
        print(str(e))
        usage(progname)
        sys.exit(1)

    global verbose
    verbose       = lambda *a : None
    hidden        = False
    terminal      = "xterm"
    name          = "i3-quaketerm"
    name_option   = "-name"
    extra_options = []
    position      = "top"
    align         = "center"
    workspace     = False
    offset        = 0
    h_ratio       = 0.25
    w_ratio       = 1.00
    for o, a in opts:
        if o in ("-v", "--verbose"):
            verbose = print
        elif o in ("-V", "--version"):
            version()
            sys.exit(0)
        elif o in ("-h", "--help"):
            usage(progname)
            sys.exit(0)
        elif o in ("-H", "--hidden"):
            hidden = True
        elif o in ("-t", "--terminal"):
            terminal = a
        elif o in ("-n", "--name"):
            name = a
        elif o in ("-N", "--name-option"):
            name_option = a
        elif o in ("-W", "--workspace"):
            workspace = True
        elif o in ("-e", "--extra-options"):
            extra_options = shlex.split(a)
        elif o in ("-p", "--position"):
            position = a
            if position not in ("top", "bottom"):
                sys.exit("error: invalid position (use top or bottom)")
        elif o in ("-a", "--align"):
            align = a
            if align not in ("left", "right", "center"):
                sys.exit("error: invalid alignment (use left, right or center")
        elif o in ("-g", "--height"):
            try:
                h_ratio = float(a)
                if h_ratio <= 0. or h_ratio > 1.:
                    raise ValueError
            except ValueError:
                sys.exit("error: invalid height ratio")
        elif o in ("-w", "--width"):
            try:
                w_ratio = float(a)
                if w_ratio <= 0. or w_ratio > 1.:
                    raise ValueError
            except ValueError:
                sys.exit("error: invalid width ratio")
        elif o in ("-o", "--offset"):
            try:
                offset = int(a)
            except ValueError:
                sys.exit("error: invalid offset")
        else:
            assert False, "unhandled option"

    i3 = i3ipc.Connection()
    focused_ws = [w for w in i3.get_workspaces() if w.focused][0]

    if workspace:
        # Prefer num to workspace name, if the workspace has been renamed.
        # If the workspace has a name but no logical number, it probably
        # means that its name won't change so much anyway.
        if focused_ws.num != -1:
            ws_id = str(focused_ws.num)
        else:
            ws_id = focused_ws.name

        name += ":%s" % (ws_id,)

    term = find(i3, name)
    if term:
        verbose("%s window found in tree" % (name,))

        hide(i3, name)
        if term.workspace().name != focused_ws.name:
            show(i3, focused_ws, name, position, align, w_ratio, h_ratio, offset)
    else:
        verbose("%s window not found, create it" % (name,))

        # Wait for the newly created terminal to appear.
        def new_window(self, event):
            if event.container.window_instance == name:
                hide(i3, name)
                if not hidden:
                    show(i3, focused_ws, name, position, align, w_ratio, h_ratio, offset)
                sys.exit(0)
        i3.on("window::new", new_window)

        # The child returning without a window appearing
        # means that an error occured.
        def sig_chld(signum, frame):
            verbose("child returned without a window")
            sys.exit(1)
        signal.signal(signal.SIGCHLD, sig_chld)

        pid = os.fork()
        if pid == 0:
            try:
                os.execvp(terminal, [terminal, name_option, name] + extra_options)
            except Exception as e:
                sys.exit("error: cannot execute terminal: " + str(e))
            assert False, "exec failed"
        i3.main()
